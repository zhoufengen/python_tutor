#!/usr/bin/env python3
# -*- coding: utf-8 -*-

print("""
多线程和多进程的模型虽然解决了并发问题，但是系统不能无上限地增加线程。
由于系统切换线程的开销也很大，所以，一旦线程数量过多，CPU的时间就花在线程切换上了，真正运行代码的时间就少了，结果导致性能严重下降。

由于我们要解决的问题是CPU高速执行能力和IO设备的龟速严重不匹配，多线程和多进程只是解决这一问题的一种方法。

另一种解决IO问题的方法是异步IO。当代码需要执行一个耗时的IO操作时，它只发出IO指令，并不等待IO结果，然后就去执行其他代码了。
一段时间后，当IO返回结果时，再通知CPU进行处理。

异步IO模型需要一个消息循环，在消息循环中，主线程不断地重复“读取消息-处理消息”这一过程：
loop = get_event_loop()
while True:
    event = loop.get_event()
    process_event(event)
    

在“发出IO请求”到收到“IO完成”的这段时间里，同步IO模型下，主线程只能挂起，但异步IO模型下，
主线程并没有休息，而是在消息循环中继续处理其他消息。这样，在异步IO模型下，一个线程就可以同时处理多个IO请求，并且没有切换线程的操作。
对于大多数IO密集型的应用程序，使用异步IO将大大提升系统的多任务处理能力。    

协程：
协程，又称微线程，纤程。英文名Coroutine。

子程序，或者称为函数，在所有语言中都是层级调用，比如A调用B，B在执行过程中又调用了C，C执行完毕返回，B执行完毕返回，最后是A执行完毕。
所以子程序调用是通过栈实现的，一个线程就是执行一个子程序。
子程序（函数）调用总是一个入口，一次返回，调用顺序是明确的。而协程的调用和子程序（函数）不同。

协程看上去也是子程序（函数），但执行过程中，在子程序（函数）内部可中断，然后转而执行别的子程序（函数），在适当的时候再返回来接着执行。

注意，在一个子程序（函数）中中断，去执行其他子程序（函数），不是函数调用，有点类似CPU的中断。比如子程序（函数）A、B：
但是在A中是没有调用B的，所以协程的调用比函数调用理解起来要难一些。

看起来A、B的执行有点像多线程，但协程的特点在于是一个线程执行，那和多线程比，协程有何优势？
最大的优势就是协程极高的执行效率。
第二大优势就是不需要多线程的锁机制。

因为协程是一个线程执行，那怎么利用多核CPU呢？最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。

Python对协程的支持是通过generator实现的。

在generator中，我们不但可以通过for循环来迭代，还可以不断调用next()函数获取由yield语句返回的下一个值。
但是Python的yield不但可以返回一个值，它还可以接收调用者发出的参数。

传统的生产者-消费者模型是一个线程写消息，一个线程取消息，通过锁机制控制队列和等待，但一不小心就可能死锁。
如果改用协程，生产者生产消息后，直接通过yield跳转到消费者开始执行，待消费者执行完毕后，切换回生产者继续生产，效率极高：












""")


def consumer():
    r = ''
    while True:
        n = yield r # 获取(接收)生产者发送的值n:c.send(n), r 回传给生产者
        if not n:
            return
        print('[CONSUMER] Consuming %s...' % n)
        r = '200 OK'

def produce(c):
    c.send(None) #首先调用c.send(None)启动生成器；
    n = 0
    while n < 5:
        n = n + 1
        print('[PRODUCER] Producing %s...' % n)
        r = c.send(n)  # 发送n到consumer，并接收返回值: 通过yield返回值
        print('[PRODUCER] Consumer return: %s' % r)
    c.close()  #produce决定不生产了，通过c.close()关闭consumer，整个过程结束。



c = consumer()
produce(c)



